@inherits Merchello.Web.Mvc.MerchelloViewPage<Merchello.Web.Models.VirtualContent.IProductContent>
@using Merchello.FastTrack.Ui
@using Merchello.Web
@using Merchello.Core
@using Merchello.Web.Models
@using Merchello.Web.Models.Ui.Rendering
@using Merchello.Web.Models.VirtualContent

@functions
{
	private List<Tuple<string, string>> categoryPages = new List<Tuple<string, string>>();
}

@{
	Layout = "Master.cshtml";
	// the Model passed here is IProductContent (virtual content) that is not generated by the Models Builder.
	// However, it is a Typed IPublishedContent model that exposes product properties such as Price, SalePrice, etc.
	// and the properties from the ContentType that was attached to the product in Merchello's back office.
	// These can be accessed in the same way as any normal IPublishedContent property e.g. GetPropertyValue


	// Determine the categoryPages with the categories
	// Remember, a merchello product has no parents, but are placed in collections. The collections are chosen in the category page.
	var collections = Model.Collections().ToArray();
	if (collections.Any())
	{
		foreach (var col in collections)
		{
			var page = ExampleUiHelper.Content.GetCategoryPageForCollection(col.Key);
			if (page != null)
			{
				categoryPages.Add(new Tuple<string, string>(col.Name, page.Url));
			}
			else
			{
				categoryPages.Add(new Tuple<string, string>(col.Name, string.Empty));
			}
		}
	}

	// Get media images
	var mediaId = Model.GetPropertyValue<string>("ftProduct_Afbeelding");
	var mediaId2 = Model.GetPropertyValue<string>("ftProduct_Afbeelding2");
	var mediaId3 = Model.GetPropertyValue<string>("ftProduct_Afbeelding3");
	var mediaId4 = Model.GetPropertyValue<string>("ftProduct_Afbeelding4");
	var image = Umbraco.TypedMedia(mediaId);
	var image2 = Umbraco.TypedMedia(mediaId2);
	var image3 = Umbraco.TypedMedia(mediaId3);
	var image4 = Umbraco.TypedMedia(mediaId4);

	// Retail price
	var justRprice = Model.GetPropertyValue<string>("ftProduct_RetailPrice");
	var Rprice = "Retail price: " + Model.GetPropertyValue<decimal>("ftProduct_RetailPrice").AsFormattedCurrency("eur");
	var noRprice = "";
}

<div class="container-fluid container hk_collections hk_product ">
	<div class="row">
		<div class="col-12 col-md-12 column">
			@* col-md-pull-4 *@
			<div class="row">
				<div class="col-md-6 col-xs-12 column hk_product_slider">
					<div class="item">
						<div class="clearfix" style="max-width:474px;">
							<ul id="image-gallery" class="gallery list-unstyled">

								@if (Model.HasValue("ftProduct_Afbeelding"))
								{
									<li data-thumb="@image.GetCropUrl(150, 150)" data-src="@image.GetCropUrl(900, 900)">
										@* data-lity hier te gebruiken *@
										<img class="img-responsive" src="@image.GetCropUrl(900, 900)" alt="@Model.Name">@* .GetCropUrl(height: 450) *@
									</li>
								}
								@if (Model.HasValue("ftProduct_Afbeelding2"))
								{
									<li data-thumb="@image2.GetCropUrl(150, 150)" data-src="@image2.GetCropUrl(900, 900)">
										@* data-lity hier te gebruiken *@
										<img class="img-responsive" src="@image2.GetCropUrl(900, 900)" alt="@Model.Name">@* .GetCropUrl(height: 450) *@
									</li>
								}
								@if (Model.HasValue("ftProduct_Afbeelding3"))
								{
									<li data-thumb="@image3.GetCropUrl(150, 150)" data-src="@image3.GetCropUrl(900, 900)">
										@* data-lity hier te gebruiken *@
										<img class="img-responsive" src="@image3.GetCropUrl(900, 900)" alt="@Model.Name">@* .GetCropUrl(height: 450) *@
									</li>
								}
								@if (Model.HasValue("ftProduct_Afbeelding4"))
								{
									<li data-thumb="@image4.GetCropUrl(150, 150)" data-src="@image4.GetCropUrl(900, 900)">
										@* data-lity hier te gebruiken *@
										<img class="img-responsive" src="@image4.GetCropUrl(900, 900)" alt="@Model.Name">@* .GetCropUrl(height: 450) *@
									</li>
								}
							</ul>
						</div>
					</div>
				</div>

				<div class="col-md-6 col-xs-12 column">
					<h2>/&nbsp;&nbsp;&nbsp;@Model.Name</h2>
					@*<p>@Html.Raw(Model.GetPropertyValue<string>("ftProduct_eenzinomschr"))</p>*@
					<span class="hk_description">@Html.Raw(Model.GetPropertyValue<string>("ftProduct_DescriptionHtml"))</span>
					<p>
						<span>
							@{ if (!String.IsNullOrEmpty(@justRprice))
								{
									@Rprice
								}
								else
								{
									@noRprice}
							}
						</span>
					</p>
					@Categories()

					@{
						<div style="display:none">@(Model.GetPropertyValue<DateTime>("ftProduct_ExpDelivery"))</div>

						// Determine out of stock message
						if (Model.TotalInventoryCount <= 0)
						{
							<ul>
								<li>Out of stock</li>
								@if (Model.HasProperty("ftProduct_ExpDelivery") && Model.HasValue("ftProduct_ExpDelivery"))
								{
									string date = Model.GetPropertyValue<DateTime>("ftProduct_ExpDelivery").ToShortDateString();
									<li class="hk_row_specs" style="list-style-type:none; padding:0px;">
										<strong style="font-weight:normal;">Expected stock date</strong>: @(date)
									</li>
								}
							</ul>
						}
					}
					<div class="col-12 col-md-12 column">
						@if (!this.CurrentCustomer.IsAnonymous)
						{
							@Html.Action("AddProductToBasketForm", "StoreBasket", new { area = "Merchello", model = Model })
						}
					</div>
					<div class="hk_product_specs">
						<button type="button" class="btn btn-primary" data-toggle="collapse" data-target="#specs">show specification<i class="fas fa-plus"></i></button>
						<ul id="specs" class="collapse">
							<li class="hk_row_specs">
								<strong>EAN code</strong>: @Html.Raw(Model.GetPropertyValue<string>("ftProduct_EAN"))
							</li>
							@*<li class="hk_row_specs">
									<strong>Afmetingen</strong>: @(Model.GetPropertyValue<string>("ftProduct_Naam"))
								</li>*@
							<li class="hk_row_specs">
								<strong>product code</strong>:  @(Model.GetPropertyValue<string>("ftProduct_Artikelnummer"))
							</li>
							<li class="hk_row_specs">
								<strong>dimensions</strong>: @Html.Raw(Model.GetPropertyValue<string>("ftProduct_afmetingen"))
							</li>
							@*@if (Model.HasValue("ftProduct_ExpDelivery"))
								{
									<li class="hk_row_specs">
										<strong>expected stock date</strong>: @(Model.GetPropertyValue<DateTime>("ftProduct_ExpDelivery").ToString("yyyy/MM/dd"))
									</li>
								}
								<li class="hk_row_specs">
										@(Model.GetPropertyValue<string>("ftProduct_Unit"))
									</li>*@
							@if (Model.HasProperty("relatedProducts") && Model.HasValue("relatedProducts"))
							{
								<li class="hk_row_specs related-products">
									<h3>Related Products</h3>
									@Html.Partial("_ProductBoxList", Model.GetPropertyValue<IEnumerable<IProductContent>>("relatedProducts"))
								</li>

							}
						</ul>

					</div>
				</div>
			</div>
			<hr />
		</div>

	</div>
</div>
@* @foreach(var variant in Model.ProductVariants)
	{
				< h3 > @variant.Name </ h3 >
				< table class="table table-striped">
					<tr>
						<td>Name</td>
						<td>Has content</td>
						<td>Body text</td>
					</tr>
					@foreach (var att in variant.Attributes)
	{
						< tr >
							< td >< b > @att.Name </ b ></ td >
							< td > @variant.AttributeHasContent(att) </ td >
							< td style = "background-color: #eee" >
								 @if(variant.AttributeHasContent(att))
								{
				var content = variant.GetContentForAttribute(att);
				if (content != null)
				{
					var html = content.GetPropertyValue<IHtmlString>("bodyText");
					@html
									}
			}
							</ td >
						</ tr >
					}
				</table>
			}*@


@helper Categories()
	{
		if (categoryPages.Count() > 0)
		{
			var needsComma = false;
			<p style="display:none;">
				Categories:
				@foreach (var pc in categoryPages)
				{
					@Umbraco.If(needsComma, ",") @Html.Raw(string.IsNullOrEmpty(pc.Item2) ? "<span>" + pc.Item1 + "</span>" : "<a href=\"" + pc.Item2 + "\">" + pc.Item1 + "</a>")
					needsComma = true;
				}
			</p>

		}
}




@section Scripts
{


	<script src="~/Scripts/lity/lity.min.js" type="text/javascript" charset="utf-8"></script>
	<script src="https://sachinchoolur.github.io/lightslider/src/js/lightslider.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/lightgallery/1.2.19/js/lightgallery-all.min.js"></script>
	<script type="text/javascript">
		jQuery(document).ready(function () {
			window.prettyPrint && prettyPrint();
			jQuery('#image-gallery').lightSlider({
				gallery: true,
				item: 1,
				loop: true,
				thumbItem: 9,
				slideMargin: 0,
				enableDrag: false,
				currentPagerPosition: 'left',
				onSliderLoad: function (el) {
					el.lightGallery({
						selector: '#image-gallery .lslide'
					});
				}
			});
		});
	</script>
	<script type="text/javascript">
		$('.btn').click(function () {
			$(this).find('i').toggleClass('fa-plus fa-minus')
				.closest('panel').siblings('panel')
				.find('i')
				.removeClass('fa-minus').addClass('fa-plus');
		});
	</script>
}

@{var hklivingname = "HKliving | ";}
@section ProductTitle { @hklivingname@{ @Model.Name} }
@section ProductDescription { @Html.Raw(hklivingname + Model.GetPropertyValue<string>("ftProduct_DescriptionHtml"))}

@section Breadcrumbs
{
	<div class="hk_breadcrumb">
		<div class="">
			<div class="row">
				<div class="col-xl-12">
					<ol class="breadcrumb">
						<li>
							<a href="/">
								Home
							</a>
						</li>
						<li>
							<a href="/collections/" class="">
								Collections
							</a>
						</li>
						@{
							Tuple<string, string> cat = categoryPages.FirstOrDefault(a => !string.IsNullOrEmpty(a.Item2));

							if (cat != null)
							{
								<li>
									<a href="@cat.Item2" class="hk_link">@cat.Item1</a>
								</li>
							}
						}
						<li>
							<a href="@Model.Url" class="hk_link_@Model.Name">@Model.Name</a>
						</li>
					</ol>
				</div>
			</div>
		</div>
	</div>
}