@using System.Web.Mvc.Html
@using Merchello.Web
@using Merchello.Web.Search
@using ETC.B2B.WEB

@inherits Merchello.Web.Mvc.MerchelloViewPage<FtCategoryLP>

@{
    Layout = "Master.cshtml";

    // This Property Hides the product in the LandingsPages
    var hideProducts = Umbraco.TypedContent(1099).Children().Where(x => x.GetPropertyValue<bool>("productCategoryManagement", true));
    var hideProductshome = Umbraco.TypedContent(3885).Children().Where(x => x.GetPropertyValue<bool>("productCategoryManagement", true));





    // Products is the property of documenttype FtCategory, of datatype Merchello.ProductListView
    // Name Produts can vary per implementation
    var ProductsProperty = Model.GetProperty("Products");
    long total = 0;

    // init the pager object with a default items per page of 20, read query parameters.
    Paging paging = new Paging(20);

    // products to be listed
    IEnumerable<Merchello.Web.Models.VirtualContent.IProductContent> products = null;

    // url to navigate to when searching
    paging.SearchUrl = "/collections/all-products/";
    // initialize merchello product searcher
    var searcher = ExamineManager.Instance.SearchProviderCollection["MerchelloProductSearcher"];


    // fields to search -> fields from Developer -> Examine Management -> MerchelloProductIndexer
    var fields = new string[] { "name", "sku", "price", "barcode", "detachedContents", "" };

    var searchCriteria = searcher.CreateSearchCriteria(Examine.SearchCriteria.BooleanOperation.Or);

    string rawQuery = string.Empty;

    if (string.IsNullOrEmpty(paging.SearchTerm))
    {

    }
    else
    {
        // Searching with fuzzynis
        // rawQuery = "+(" + string.Join(":*" + paging.SearchTerm + "* " + paging.SearchTerm + "~0.1", fields).TrimEnd(" ") + ")";

        // Searching without fuzzynis
        rawQuery = "+(" + string.Join(":*" + paging.SearchTerm + "* ", fields).TrimEnd(" ") + ") ";
    }

    // only the available products
    rawQuery += "+available:true";

    // when searching, de not limit to collections
    if (string.IsNullOrEmpty(paging.SearchTerm))
    {
        string collectionKey = ProductsProperty.DataValue == null ? string.Empty : ProductsProperty.DataValue.ToString();

        if (!string.IsNullOrEmpty(collectionKey))
        {
            // in the selected collection
            rawQuery += " +staticCollectionKeys:" + collectionKey;
        }
    }


    /*
     For performance its best to Page and sort in lucern examine searcher.

     However, it's not fully possible to determine of an object is active or not (stock/avalablitity/sku's etc).
     When this is the case (products are counted but not visible), set underlying true to false
     */

#if true

    /*
    Sort and page in Lucerne (best performance)
    */

    // perform lucerne search
    var searchResults = searcher.Search(searchCriteria.RawQuery(rawQuery));

    total = searchResults.Count();

    // calculate pager
    paging.CalculatePages(total);

    IOrderedEnumerable<SearchResult> ordererd = null;

    // sorting
    switch (paging.SortTerm.ToLower())
    {
        case "priceasc":
            ordererd = searchResults.OrderBy<SearchResult, decimal>(a =>
            {
                decimal price;
                decimal.TryParse(a.Fields["price"], out price);
                return price;
            });
            break;
        case "pricedesc":
            ordererd = searchResults.OrderByDescending<SearchResult, decimal>(a =>
            {
                decimal price;
                decimal.TryParse(a.Fields["price"], out price);
                return price;
            });
            break;
        default:
            ordererd = searchResults.OrderBy<SearchResult, float>(a => a.Score);
            break;
    }



    // Check if products are active/available (stock/price etc)
    products = ordererd.Skip((int)((paging.CurrentPage - 1) * paging.ItemsPerPage)).Take(paging.ItemsPerPage).Select(a =>
    {
        return this.Merchello.TypedProductContent(new Guid(a.Fields["productKey"]));
    }
).Where(a => a != null).ToList();

#else


	 /*
	 Sort and page in merchello object set
	 */


	// perform lucerne search
	var searchResults = searcher.Search(searchCriteria.RawQuery(rawQuery));


	// Check if products are active/available (stock/price etc)
	products = searchResults.Select(a =>
	{
		return this.Merchello.TypedProductContent(new Guid(a.Fields["productKey"]));
	}
	).Where(a => a != null).ToList();

	total = products.Count();

	// calculate pager
	paging.CalculatePages(total);

	// sorting
	switch (paging.SortTerm.ToLower())
	{
		case "priceasc":
			products = products.OrderBy(a => a.Price);
			break;
		case "pricedesc":
			products = products.OrderByDescending(a => a.Price);
			break;
	}

	// paging
	products = products.Skip((int)((paging.CurrentPage - 1) * paging.ItemsPerPage)).Take(paging.ItemsPerPage);

#endif


    if (products == null)
    {
        // create empty list
        products = new List<Merchello.Web.Models.VirtualContent.IProductContent>();
    }

    var currentPageId = UmbracoContext.Current.PageId;
}
@*
    @Html.Partial("_Headline")
*@


<div class="container-fluid hk_collections hk_category" id="hk_cat_@currentPageId">
    <div class="row">
        
		<div class="col-4 col-xl-3 col-md-3 r-catalog-left">
		    @* left side of catalog *@
            @RenderSearchForm(paging)
            @Html.Partial("hkCategories")
        </div>

		@* left side catalog button to open left side menu *@
		<div class="r-catalog-left-button">
		    <div class="r-catalog-left-button-inner">
		        <div class="r-catalog-left-button-icon">
    		        &nbsp;
    		    </div> 
		    </div>
		</div>

        <div class="col-8 col-xl-9 col-md-9 r-catalog-right">
            
			@*fix for broken search on CategoryLP *@
			
			@{	
			string strQ = Request.QueryString["q"];
			if (!String.IsNullOrEmpty(strQ)) {
				
			<div class="row">
				<div class="col-md-6 hk_sort">
					@RenderSortingDropDown(paging)
				</div>
				<div class="col-md-6 text-right hk_sort">
					@RenderItemsDropDown(paging)
				</div>
			</div>
			@Html.Partial("_ProductBoxList", products)
			<div class="row col-12 pagination">
				<nav aria-label="Page navigation" class="hk_pagination">
					<ul class="pagination">
						@RenderPaging(paging, paging.CurrentPage)
					</ul>
				</nav>
			</div>		
			
			}	
			}	
			@* end fix *@
			
			
            <div class="row">
                <div class="col-12 hk_categorie_media_LP hk_categorie_media_top">
                    @Html.GetGridHtml(Umbraco.TypedContent(currentPageId), "collectionGridTop")
                </div>
                </div></div>
                @if (hideProducts.Count() > 0)
                {
                    
                }
            </div>
        </div>
        <div class="col-12 hk_categorie_media">
            @Html.GetGridHtml(Umbraco.TypedContent(currentPageId), "collectionGrid")
        </div>


<div class="col-12 hk_categorie_featured">

	@{
		// http://projecten.vwa.nu:888/redmine/issues/5329
		// Featured products..
		// Products are rendered in partial view _productboxlist
		// @Niels, kan gestijld worden door bv. hk_categorie_featured te gebruiken.
		// Eventueel kan je van _productBoxList een kopie maken om de rendering aan te passen.


		// List of featured Products
		// Filter op null values (product may be disabled, this results in a null value)

        

		if (Model.FeaturedProducts != null)
		{

			IEnumerable<Merchello.Web.Models.VirtualContent.IProductContent> featuredProducts = Model.FeaturedProducts.Where(a => a != null);

			if (featuredProducts != null && featuredProducts.Count() > 0)
			{
				<div class="col-12 hk_categorie_media">

					<div class="hk_category_name_list hk_highlighted">
						<h1 class="hk_category_name"><span>@Umbraco.Field("featuredCategoryName")</span></h1>
						<h2 class="hk_category_name">highlighted</h2>
					</div>
					@Html.Partial("_ProductBoxList", featuredProducts)
				</div>

			}
		}
	}

</div>


        @helper RenderPaging(Paging paging, long currentId)
        {
/**/

/**/

    <li class="page-item">
        <a class="@(paging.CurrentPage > 1 ? "" : "disabled")  fas fa-step-backward" @(paging.CurrentPage > 1 ? "href=?q=" + paging.SearchTerm + "&page=" + paging.PreviousPage + "&ItemsPerPage=" + paging.ItemsPerPage + "&SortTerm=" + paging.SortTerm : "disabled")>&nbsp;</a>
    </li>

if (paging.StartPageToShow > 1)
{
        <li class="page-item"><a href="?q=@(paging.SearchTerm)&page=1&ItemsPerPage=@(paging.ItemsPerPage)&SortTerm=@(paging.SortTerm)">1..</a><text>&nbsp;</text></li>
}

for (var i = paging.StartPageToShow; i <= paging.EndPageToShow; i++)
{
    if (paging.CurrentPage == i)
    {
            <span><span>@i</span></span><text>&nbsp;</text>
    }
    else
    {
            @*<a href="?q=@(paging.SearchTerm)&page=@i">@i</a><text>&nbsp;</text>*@
            <li class="page-item"><a href="?q=@(paging.SearchTerm)&page=@(i)&ItemsPerPage=@(paging.ItemsPerPage)&SortTerm=@(paging.SortTerm)">@i</a><text>&nbsp;</text></li>
    }
}

if (paging.EndPageToShow < paging.TotalPages)
{
        <li class="page-item"><a href="?q=@(paging.SearchTerm)&page=@(paging.TotalPages)&ItemsPerPage=@(paging.ItemsPerPage)&SortTerm=@(paging.SortTerm)">...@paging.TotalPages</a></li><text>&nbsp;</text>
}
    <li class="page-item">	<a class="@(paging.CurrentPage < paging.TotalPages ? "" : "disabled") fas fa-step-forward" @(paging.CurrentPage < paging.TotalPages ? "href=?q=" + paging.SearchTerm + "&page=" + paging.NextPage + "&ItemsPerPage=" + paging.ItemsPerPage + "&SortTerm=" + paging.SortTerm : "disabled")>&nbsp;</a></li>
}


        @helper RenderSortingDropDown(ETC.B2B.WEB.Paging paging)
        {

        <div class="dropdown">
            <button class="form-control form-sort" type="button" data-toggle="dropdown">
                @{
                    // determine selected sortname
                    string sortname = string.Empty;
                    switch (paging.SortTerm.ToLower())
                    {
                        case "priceasc":
                            sortname = "Price ascending";
                            break;

                        case "pricedesc":
                            sortname = "Price descending";
                            break;
                        default:
                            sortname = "sort products";
                            break;
                    }
                }
                @sortname
                <i class="fa fa-caret-down"></i>
            </button>

            <ul class="dropdown-menu">
                <li><a href="?q=@(paging.SearchTerm)&page=@paging.CurrentPage">sort products</a></li>
                <li><a href="?q=@(paging.SearchTerm)&page=@(paging.CurrentPage)&ItemsPerPage=@(paging.ItemsPerPage)&SortTerm=priceasc">Price ascending</a></li>
                <li><a href="?q=@(paging.SearchTerm)&page=@(paging.CurrentPage)&ItemsPerPage=@(paging.ItemsPerPage)&SortTerm=pricedesc">Price descending</a></li>
            </ul>
        </div>
}

        @*btn btn-primary dropdown-toggle*@
        @helper RenderItemsDropDown(ETC.B2B.WEB.Paging paging)
        {
        <div class="dropdown">
            <button class="form-control form-sort" type="button" data-toggle="dropdown">
                show @paging.ItemsPerPage results
                <i class="fa fa-caret-down"></i>
            </button>
            <ul class="dropdown-menu">
                <li><a href="?q=@(paging.SearchTerm)&page=@(paging.CurrentPage)&ItemsPerPage=20&SortTerm=@(paging.SortTerm)">show 20 results</a></li>
                <li><a href="?q=@(paging.SearchTerm)&page=@(paging.CurrentPage)&ItemsPerPage=40&SortTerm=@(paging.SortTerm)">show 40 results</a></li>
                <li><a href="?q=@(paging.SearchTerm)&page=@(paging.CurrentPage)&ItemsPerPage=60&SortTerm=@(paging.SortTerm)">show 60 results</a></li>
                <li><a href="?q=@(paging.SearchTerm)&page=@(paging.CurrentPage)&ItemsPerPage=80&SortTerm=@(paging.SortTerm)">show 80 results</a></li>
                <li><a href="?q=@(paging.SearchTerm)&page=@(paging.CurrentPage)&ItemsPerPage=100&SortTerm=@(paging.SortTerm)">show 100 results</a></li>
            </ul>
        </div>
}

        @helper  RenderSearchForm(ETC.B2B.WEB.Paging paging)
{
        <div class="hk_search">

            <h3>@(Umbraco.GetDictionaryValue("Search", "Search"))</h3>

            <form action="@paging.SearchUrl" class="form-inline search" id="hk_search-input" method="get">

                <div class="form-group">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="@(Umbraco.GetDictionaryValue("Search", "Search"))" id="etc-search-term" value="@paging.SearchTerm" name="q" />
                        <span class="input-group-addon">
                            <button class="" type="submit"><i class="glyphicon fa fa-search "></i></button>
                        </span>
                    </div>
                </div>


                @*<ul>
                        <li>
                            <input type="text" class="form-control input-lg" placeholder="@(Umbraco.GetDictionaryValue("Search", "Search"))"  id="etc-search-term" value="@paging.SearchTerm" name="q" />
                        </li>
                        <li>
                            <button class="btn btn-info btn-lg" type="submit" >
                                <i class="glyphicon fa fa-search "></i>
                            </button>
                        </li>
                    </ul>*@
            </form>
        </div>
}

@section Scripts {

	<script src="~/Scripts/lity/lity.min.js" type="text/javascript" charset="utf-8"></script>
	<script src="https://sachinchoolur.github.io/lightslider/src/js/lightslider.js"></script>

	<script type="text/javascript">
             $(function () {
                    $('.hk_media_display_list').each(function (i, e) {
                           var id = 'adaptive';
                           $(e).attr('id', id + i);
                           var selector = '#' + id + i;
                           $(selector).lightSlider({
                                  autoWidth: false,
                                  loop: true,
                                  keyPress: true
                           });
                    });

                    $('.parent_list a.collapsable').click(function () {
                           $(this).siblings('ul').toggle('toggle');
                           $(this).next().toggleClass('fa-plus fa-minus');
                           return false;
                    });
             });          
       </script>


}

@section Breadcrumbs {

    @{
       
            <div class="hk_breadcrumb">
                <div class="">
                    <div class="row">
                        <div class="col-xl-12">
                            <ol class="breadcrumb">
                                <li><a href="/">Home</a></li>
                                    <li>
                                        <a href="@Model.Url" class="hk_link_@Model.Name">@Model.Name </a>
                                    </li>
</ol>
                    </div>
                </div>
            </div>
        </div>  
        
                                
        
    }


}