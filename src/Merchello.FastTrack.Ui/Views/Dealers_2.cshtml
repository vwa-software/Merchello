@inherits Umbraco.Web.Mvc.UmbracoTemplatePage<ContentModels.Dealers>
@using ContentModels = Umbraco.Web.PublishedContentModels;
@using ClientDependency.Core.Mvc;
@{

	Layout = "Master.cshtml";


	string mapsSettings = "{ZoomToGeoLocation : ";
	if (this.Model.Content.HasProperty("zoomInOpEigenLocatie") && this.Model.Content.GetPropertyValue<bool>("zoomInOpEigenLocatie"))
	{
		mapsSettings += "true";
	}
	else
	{
		mapsSettings += "false";
	}
	mapsSettings += ",ZoomToGeoLocationLevel : ";
	if (this.Model.Content.HasValue("zoomLevel"))
	{
		mapsSettings += this.Model.Content.GetPropertyValue<int>("zoomLevel").ToString();
	}
	else
	{
		mapsSettings += 10;
	}
	mapsSettings += "}";

	Html.RequiresCss("~/Css/vwa_maps.css");
	Html.RequiresJs("~/Scripts/vwa_maps.js");
}
<div class="vwa_map_dealers" id="vwa_map_dealers">
	<div id="map" style="height:480px;"></div>
</div>
<div class="container-fluid hk_dealers" id="hk_dealers">
	<div class="row">
		<div class="container">


			<div class="form-inline search" id="hk_search-input">
				<div class="row">

					<div class="col-md-12">
						<span class="hk_lbl-TypeStore">Type of store:</span>
						<input type="hidden" id="isWebStore" name="isWebStore" value="0" />
						<input type="hidden" id="isStore" name="isStore" value="0" />
						<div class="btn-group btn-stores" role="group" aria-label="Select the store type">
							<div>
								<button type="button" id="btnIsWebStore" class="btn btn-default"><i class="fas fa-shopping-cart"></i> Webstore</button>
								<button type="button" id="btnIsStore" class="btn btn-default"><i class="fas fa-store-alt"></i> Store</button>
							</div>
						</div>
					</div>
					<div class="form-group col-md-12">
						<div class="input-group">
							<input type="text" class="form-control" value="" placeholder="Search" id="etc-search-term" name="q">
							<span class="input-group-addon">
								<button class="" id="btnSubmit"><i class="glyphicon fa fa-search "></i></button>
							</span>
						</div>
					</div>
				</div>
			</div>
			<div id="dealers_wrp">
				Loading dealers, please wait.
			</div>




		</div>
	</div>
</div>



@section Scripts {
	<script src="https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js"></script>
	<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDaGmDGmRqjM4K-YEm_zJQ4KKT44OAKPO4&callback=initMap&libraries=geometry" async defer></script>

	<script>

		
		var gsLoaded = false;
		var markersLoaded = false;
		var _markers = null;
		var currentPos = null;


		function initMap() {
			gsLoaded = true;
			if (markersLoaded)
				loadMarkers()
		}

		function loadMarkers(position) {
			if (gsLoaded)
				initMapjs($('#etc-search-term').val(), @(mapsSettings), _markers, position );
		}

		// Try HTML5 geolocation.
		if (navigator.geolocation) {
			navigator.geolocation.getCurrentPosition(function (position) {
				currentPos = {
					lat: position.coords.latitude,
					lng: position.coords.longitude
				};
				GetDealers(currentPos);
			}, function () {
				GetDealers();
			});
		} else {
			// Browser doesn't support Geolocation
			GetDealers();
		}

		function GetDealers(searchArountCoordinates) {

			var lat = "";
			var lng = "";

			var q = $('#etc-search-term').val();
			var isWebStore = $('#isWebStore').val();
			var isStore = $('#isStore').val();

			if (searchArountCoordinates) {
				lat = searchArountCoordinates.lat
				lng = searchArountCoordinates.lng;
			}

			var requestparams = { 'id': @(this.Model.Content.Id), 'lat': lat, 'lng': lng, 'q': q, 'isstore': isStore, 'iswebstore': isWebStore };

			// Get markers
			 $.ajax({
				dataType: "json",
				url: '@Url.Action("GetStoresAsJson","StoreLocator")',
				data: requestparams,
				success: function (result) {
					markersLoaded = true;
					_markers = result;
					loadMarkers(searchArountCoordinates);
				}
			});

			// Get html list
			$('#dealers_wrp').load('@Url.Action("GetStoresAsHtml", "StoreLocator")', requestparams, function () { }, function(){
				$('#dealers_wrp').html("<p class='error'>Failed to get all stores</p>");
			});

			return false;
		}


		function toggleShop(type, event) {
			var ell = $("#" + type);
			var val = ell.val();
			ell.val(val == "1" ? "0" : "1");

			$(event.target).toggleClass('on', val == "0");

			$("#btnSubmit").click();
		}

		$('#btnIsWebStore').click(function (e) { toggleShop("isWebStore",e) });
		$('#btnIsStore').click(function (e) { toggleShop("isStore",e) });

		$('#etc-search-term').on('keypress', function (e) {
			if (e.which == 13) {
				doSearch(e);
			}
		});

		$('#btnSubmit').click(function (e) {
			doSearch(e);
		});

		function doSearch(event) {

			var search = $('#etc-search-term').val().trim();

			if (!search.length) {
				GetDealers(currentPos);
			} else {
				var geocoder = new google.maps.Geocoder();

				geocoder.geocode({ 'address': search }, function (results, status) {
					if (status === 'OK') {
						GetDealers({
							lat: results[0].geometry.location.lat(), lng: results[0].geometry.location.lng()
						} );
					} else {
						alert('Geocode was not successful for the following reason: ' + status);
					}
				});
			}
			

			return false;
		}
   

	</script>
}