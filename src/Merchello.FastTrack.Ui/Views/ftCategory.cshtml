@using System.Web.Mvc.Html
@using Merchello.Web
@using Merchello.Web.Search
@using ETC.B2B.WEB
@using Umbraco.Core.Logging

@inherits Merchello.Web.Mvc.MerchelloViewPage<FtCategory>
@functions{

	private void AddCollectionsToQuery(Guid key, ref string rawQuery)
	{
		foreach (var child in Merchello.Collections.Product.GetChildCollections(key))
		{
			rawQuery += " " + child.Key.ToString();

			if (child.Children().Count() > 0)
			{
				AddCollectionsToQuery(child.Key, ref rawQuery);
			}
		}
	}
}

@{
	Layout = "Master.cshtml";

	//http://projecten.vwa.nu:888/redmine/issues/5316
	// Remember this page for basket return button
	Session["lastcollectionId"] = UmbracoContext.Current.PageId;

	// Products is the property of documenttype FtCategory, of datatype Merchello.ProductListView
	// Name Produts can vary per implementation
	var ProductsProperty = Model.GetProperty("Products");
	long total = 0;

	// init the pager object with a default items per page of 20, read query parameters.
	Paging paging = new Paging(20);

	// products to be listed
	IEnumerable<Merchello.Web.Models.VirtualContent.IProductContent> products = null;

	// url to navigate to when searching
	paging.SearchUrl = Model.Url;

	// initialize merchello product searcher
	Examine.Providers.BaseSearchProvider searcher = null;

#if true
	// perform lucerne search
	ISearchResults searchResults = null;
	try
	{

		searcher = ExamineManager.Instance.SearchProviderCollection["MerchelloProductSearcher"];


		// fields to search -> fields from Developer -> Examine Management -> MerchelloProductIndexer
		var fields = new string[] { "name", "sku", "price", "barcode", "detachedContents", "" };

		var searchCriteria = searcher.CreateSearchCriteria(Examine.SearchCriteria.BooleanOperation.Or);

		//http://www.lucenetutorial.com/lucene-query-syntax.html
		string rawQuery = string.Empty;

		if (string.IsNullOrEmpty(paging.SearchTerm))
		{
		}
		else
		{
			// Searching with fuzzynis
			// rawQuery = "+(" + string.Join(":*" + paging.SearchTerm + "* " + paging.SearchTerm + "~0.1", fields).TrimEnd(" ") + ")";

			// Searching without fuzzynis
			rawQuery = "+(" + string.Join(":*" + paging.SearchTerm + "* ", fields).TrimEnd(" ") + ") ";
		}

		// only the available products
		rawQuery += "+available:true";

		// when searching, de not limit to collections
		if (string.IsNullOrEmpty(paging.SearchTerm))
		{
			if (ProductsProperty.DataValue != null && !string.IsNullOrEmpty(ProductsProperty.DataValue.ToString()))
			{

				// in the selected collection
				rawQuery += " +staticCollectionKeys:(" + ProductsProperty.DataValue.ToString();
				try
				{
					AddCollectionsToQuery(new Guid(ProductsProperty.DataValue.ToString()), ref rawQuery);
				}
				catch (Exception)
				{
					// ignore, in some cases the datavalue is no valid guid string.
				}

				rawQuery += ")";
			}
		}

		if (CurrentCustomer.IsAnonymous)
		{
			// exclude service items and strbr collections
			rawQuery += " -staticCollectionKeys:ecfa2964-c513-4527-8453-1c8611fe2900 0f4d5320-4823-4c4a-85c3-993bb094b94a";
		}

		/*
		 For performance its best to Page and sort in lucern examine searcher.

		 However, it's not fully possible to determine of an object is active or not (stock/avalablitity/sku's etc).
		 When this is the case (products are counted but not visible), set underlying true to false
		 */


		/*
		Sort and page in Lucerne (best performance)
		*/


		if (searcher != null)
		{

		}
		searchResults = searcher.Search(searchCriteria.RawQuery(rawQuery));
		total = searchResults.Count();


		// calculate pager
		paging.CalculatePages(total);

		IOrderedEnumerable<SearchResult> ordererd = null;

		// sorting
		switch (paging.SortTerm.ToLower())
		{
			case "priceasc":
				ordererd = searchResults.OrderBy<SearchResult, decimal>(a =>
				{
					decimal price;
					decimal.TryParse(a.Fields["price"], out price);
					return price;
				});
				break;
			case "pricedesc":
				ordererd = searchResults.OrderByDescending<SearchResult, decimal>(a =>
				{
					decimal price;
					decimal.TryParse(a.Fields["price"], out price);
					return price;
				});
				break;
			case "skuasc":
				ordererd = searchResults.OrderBy<SearchResult, string>(a =>
				{
					return a.Fields["sku"].ToString();
				});
				break;
			case "skudesc":
				ordererd = searchResults.OrderByDescending<SearchResult, string>(a =>
				{
					return a.Fields["sku"].ToString();
				});
				break;
			default:
				ordererd = searchResults.OrderBy<SearchResult, float>(a => a.Score);
				break;
		}


		// Check if products are active/available (stock/price etc)
		products = ordererd.Skip((int)((paging.CurrentPage - 1) * paging.ItemsPerPage)).Take(paging.ItemsPerPage).Select(a =>
		{
			return this.Merchello.TypedProductContent(new Guid(a.Fields["productKey"]));
		}).Where(a => a != null).ToList();

	}
	catch (Exception ex)
	{
		LogHelper.Error(this.GetType(), "Error trying to use searcher", ex);
	}

#else


/*
Sort and page in merchello object set
*/


// perform lucerne search
var searchResults = searcher.Search(searchCriteria.RawQuery(rawQuery));


// Check if products are active/available (stock/price etc)
products = searchResults.Select(a =>
{
return this.Merchello.TypedProductContent(new Guid(a.Fields["productKey"]));
}
).Where(a => a != null).ToList();

total = products.Count();

// calculate pager
paging.CalculatePages(total);

// sorting
switch (paging.SortTerm.ToLower())
{
case "priceasc":
products = products.OrderBy(a => a.Price);
break;
case "pricedesc":
products = products.OrderByDescending(a => a.Price);
break;
}

// paging
products = products.Skip((int)((paging.CurrentPage - 1) * paging.ItemsPerPage)).Take(paging.ItemsPerPage);

#endif


	if (products == null)
	{
		// create empty list
		products = new List<Merchello.Web.Models.VirtualContent.IProductContent>();
	}

	var currentPageId = UmbracoContext.Current.PageId;
}

@*
	@Html.Partial("_Headline")
*@

<!--ftCategoryView -->
<div class="container-fluid hk_collections hk_category" id="hk_cat_@currentPageId">
	<div class="row">
		<div class="col-12 hk_categorie_media hk_categorie_media_top">
			@Html.GetGridHtml(Model, "collectionGridTop")
		</div>
		<div class="col-4 col-xl-3 col-md-3">
			@*@Html.Partial("hkSearch")*@
			@RenderSearchForm(paging)
			@Html.Partial("hkCategories")
		</div>
		<div class="col-8 col-xl-9 col-md-9">
			<div class="row">
				<div class="col-md-6 hk_sort">
					@RenderSortingDropDown(paging)
				</div>
				<div class="col-md-6 text-right hk_sort">
					@RenderItemsDropDown(paging)
				</div>
			</div>
			@Html.Partial("_ProductBoxList", products)
			<div class="row col-12 pagination">
				<nav aria-label="Page navigation" class="hk_pagination">
					<ul class="pagination">
						@RenderPaging(paging, paging.CurrentPage)
					</ul>
				</nav>
			</div>
		</div>
	</div>
</div>

<div class="col-12 hk_categorie_media">
	@Html.GetGridHtml(Model, "collectionGrid")
</div>

<div class="col-12 hk_categorie_featured">

	@{
		// http://projecten.vwa.nu:888/redmine/issues/5329
		// Featured products..
		// Products are rendered in partial view _productboxlist
		// @Niels, kan gestijld worden door bv. hk_categorie_featured te gebruiken.
		// Eventueel kan je van _productBoxList een kopie maken om de rendering aan te passen.


		// List of featured Products
		// Filter op null values (product may be disabled, this results in a null value)



		if (Model.FeaturedProducts != null)
		{

			IEnumerable<Merchello.Web.Models.VirtualContent.IProductContent> featuredProducts = Model.FeaturedProducts.Where(a => a != null);

			if (featuredProducts != null && featuredProducts.Count() > 0)
			{
				<div class="col-12 hk_categorie_media">

					<div class="hk_category_name_list hk_highlighted">
						<h1 class="hk_category_name"><span>@Umbraco.Field("featuredCategoryName")</span></h1>
						<h2 class="hk_category_name">highlighted</h2>
					</div>
					@Html.Partial("_ProductBoxList", featuredProducts)
				</div>

			}
		}
	}

</div>



@helper RenderPaging(Paging paging, long currentId)
	{
		/**/

		/**/

		<li class="page-item">
			<a class="@(paging.CurrentPage > 1 ? "" : "disabled")  fas fa-step-backward" @(paging.CurrentPage > 1 ? "href=?q=" + paging.SearchTerm + "&page=" + paging.PreviousPage + "&ItemsPerPage=" + paging.ItemsPerPage + "&SortTerm=" + paging.SortTerm : "disabled")>&nbsp;</a>
		</li>

		if (paging.StartPageToShow > 1)
		{
			<li class="page-item"><a href="?q=@(paging.SearchTerm)&page=1&ItemsPerPage=@(paging.ItemsPerPage)&SortTerm=@(paging.SortTerm)">1..</a><text>&nbsp;</text></li>
		}

		for (var i = paging.StartPageToShow; i <= paging.EndPageToShow; i++)
		{
			if (paging.CurrentPage == i)
			{
				<span><span>@i</span></span><text>&nbsp;</text>
			}
			else
			{
				@*<a href="?q=@(paging.SearchTerm)&page=@i">@i</a><text>&nbsp;</text>*@
				<li class="page-item"><a href="?q=@(paging.SearchTerm)&page=@(i)&ItemsPerPage=@(paging.ItemsPerPage)&SortTerm=@(paging.SortTerm)">@i</a><text>&nbsp;</text></li>
			}
		}

		if (paging.EndPageToShow < paging.TotalPages)
		{
			<li class="page-item"><a href="?q=@(paging.SearchTerm)&page=@(paging.TotalPages)&ItemsPerPage=@(paging.ItemsPerPage)&SortTerm=@(paging.SortTerm)">...@paging.TotalPages</a></li><text>&nbsp;</text>
		}
		<li class="page-item">	<a class="@(paging.CurrentPage < paging.TotalPages ? "" : "disabled") fas fa-step-forward" @(paging.CurrentPage < paging.TotalPages ? "href=?q=" + paging.SearchTerm + "&page=" + paging.NextPage + "&ItemsPerPage=" + paging.ItemsPerPage + "&SortTerm=" + paging.SortTerm : "disabled")>&nbsp;</a></li>
}


@helper RenderSortingDropDown(ETC.B2B.WEB.Paging paging)
	{

		<div class="dropdown">
			<button class="form-control form-sort" type="button" data-toggle="dropdown">
				@{
					// determine selected sortname
					string sortname = string.Empty;
					switch (paging.SortTerm.ToLower())
					{
						case "priceasc":
							sortname = "Price ascending";
							break;

						case "pricedesc":
							sortname = "Price descanding";
							break;
						case "skuasc":
							sortname = "Productcode ascending";
							break;
						case "skudesc":
							sortname = "Productcode descanding";
							break;
						default:
							sortname = "sort products";
							break;
					}
				}
				@sortname
				<i class="fa fa-caret-down"></i>
			</button>

			<ul class="dropdown-menu">
				<li><a href="?q=@(paging.SearchTerm)&page=@paging.CurrentPage">sort products</a></li>
				<li><a href="?q=@(paging.SearchTerm)&page=@(paging.CurrentPage)&ItemsPerPage=@(paging.ItemsPerPage)&SortTerm=priceasc">Price ascending</a></li>
				<li><a href="?q=@(paging.SearchTerm)&page=@(paging.CurrentPage)&ItemsPerPage=@(paging.ItemsPerPage)&SortTerm=pricedesc">Price descanding</a></li>
				<li><a href="?q=@(paging.SearchTerm)&page=@(paging.CurrentPage)&ItemsPerPage=@(paging.ItemsPerPage)&SortTerm=skuasc">Productcode ascending</a></li>
				<li><a href="?q=@(paging.SearchTerm)&page=@(paging.CurrentPage)&ItemsPerPage=@(paging.ItemsPerPage)&SortTerm=skudesc">Productcode descanding</a></li>
			</ul>
		</div>
}

@*btn btn-primary dropdown-toggle*@
@helper RenderItemsDropDown(ETC.B2B.WEB.Paging paging)
	{
		<div class="dropdown">
			<button class="form-control form-sort" type="button" data-toggle="dropdown">
				show @paging.ItemsPerPage results
				<i class="fa fa-caret-down"></i>
			</button>
			<ul class="dropdown-menu">
				<li><a href="?q=@(paging.SearchTerm)&page=@(paging.CurrentPage)&ItemsPerPage=20&SortTerm=@(paging.SortTerm)">show 20 results</a></li>
				<li><a href="?q=@(paging.SearchTerm)&page=@(paging.CurrentPage)&ItemsPerPage=60&SortTerm=@(paging.SortTerm)">show 60 results</a></li>
				<li><a href="?q=@(paging.SearchTerm)&page=@(paging.CurrentPage)&ItemsPerPage=100&SortTerm=@(paging.SortTerm)">show 100 results</a></li>
			</ul>
		</div>
}

@helper  RenderSearchForm(ETC.B2B.WEB.Paging paging)
	{
		<div class="hk_search">

			<h3>@(Umbraco.GetDictionaryValue("Search", "Search"))</h3>

			<form action="@paging.SearchUrl" class="form-inline search" id="hk_search-input" method="get">

				<div class="form-group">
					<div class="input-group">
						<input type="text" class="form-control" placeholder="@(Umbraco.GetDictionaryValue("Search", "Search"))" id="etc-search-term" value="@paging.SearchTerm" name="q" />
						<span class="input-group-addon">
							<button class="" type="submit"><i class="glyphicon fa fa-search "></i></button>
						</span>
					</div>
				</div>


				@*<ul>
						<li>
							<input type="text" class="form-control input-lg" placeholder="@(Umbraco.GetDictionaryValue("Search", "Search"))"  id="etc-search-term" value="@paging.SearchTerm" name="q" />
						</li>
						<li>
							<button class="btn btn-info btn-lg" type="submit" >
								<i class="glyphicon fa fa-search "></i>
							</button>
						</li>
					</ul>*@
			</form>
		</div>
}
@section Scripts {

	<script src="~/Scripts/lity/lity.min.js" type="text/javascript" charset="utf-8"></script>
	<script src="https://sachinchoolur.github.io/lightslider/src/js/lightslider.js"></script>

	@*	<script>
			$('.hk_media_display_list').each(function (i, e) {
				var id = 'adaptive';
				$(e).attr('id', id + i);
				var selector = '#' + id + i;
				$(selector).lightSlider({
					autoWidth: false,
					loop: true,
					keyPress: true
				});
			});

		</script>

		<script type="text/javascript">
			$('.parent_list li').bind("click", function(){

				$(this).find('i').toggleClass('fa-plus fa-minus')
					.closest('panel').siblings('panel')
					.find('i')
					.removeClass('fa-minus').addClass('fa-plus');
			});
		</script>*@
	<script type="text/javascript">
		$(function () {
			$('.hk_media_display_list').each(function (i, e) {
				var id = 'adaptive';
				$(e).attr('id', id + i);
				var selector = '#' + id + i;
				$(selector).lightSlider({
					autoWidth: false,
					loop: true,
					keyPress: true
				});
			});

			$('.parent_list a.collapsable').click(function () {
				$(this).siblings('ul').toggle('toggle');
				$(this).next().toggleClass('fa-plus fa-minus');
				return false;
			});
		});
	</script>


}

@section Breadcrumbs {

	@{

		<div class="hk_breadcrumb">
			<div class="">
				<div class="row">
					<div class="col-xl-12">
						<ol class="breadcrumb">
							<li><a href="/">Home</a></li>
							<li><a href="/collections/" class="">Collections</a></li>
							<li>
								<a href="@Model.Url" class="hk_link_@Model.Name">@Model.Name </a>
							</li>
						</ol>
					</div>
				</div>
			</div>
		</div>



	}


}